package com.realtimeradar.controller;

import com.realtimeradar.entity.Place;
import com.realtimeradar.entity.TravelCategory;
import com.realtimeradar.repository.PlaceRepository;
import com.realtimeradar.repository.TravelCategoryRepository;
import com.realtimeradar.service.TravelCategoryService;
import jakarta.servlet.http.HttpSession;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;


@Controller
@RequiredArgsConstructor
public class TravelContentController {

    private final PlaceRepository placeRepository;
    private final TravelCategoryRepository travelCategoryRepository;
    private final TravelCategoryService service;
    private final TravelCategoryService travelCategoryService;

    @GetMapping("/travel-content")
    public String showTravelContent(
            @RequestParam(name = "region", required = false) String regionParam,
            Model model,
            HttpSession session) {

        if (regionParam == null || regionParam.isBlank()) {
            regionParam = "ÏàòÏõê";
        }

        List<String> recentRegions = (List<String>) session.getAttribute("recentRegions");
        if (recentRegions == null) {
            recentRegions = new ArrayList<>();
        }

        if (!regionParam.equals("Ï†ÑÏ≤¥")) {
            recentRegions.remove(regionParam);
            recentRegions.add(0, regionParam);

            if (recentRegions.size() > 5) {
                recentRegions = new ArrayList<>(recentRegions.subList(0, 5));
            }

            session.setAttribute("recentRegions", recentRegions);
        }

        String region = switch (regionParam) {
            case "ÏÑúÏö∏" -> "seoul";
            case "ÏàòÏõê" -> "suwon";
            case "Ïù∏Ï≤ú" -> "incheon";
            case "Í¥ëÏ£º" -> "gwangju";
            case "Ï†ÑÏ£º" -> "jeonju";
            case "Ïû•ÏÑ±" -> "jangseong";
            case "Î∂ÄÏÇ∞" -> "busan";
            case "ÎåÄÍµ¨" -> "daegu";
            case "Ï∞ΩÏõê" -> "changwon";
            case "ÎåÄÏ†Ñ" -> "daejeon";
            case "Ï†úÏ£º" -> "jeju";
            default -> "default";
        };

        String regionFullName = switch (regionParam) {
            case "ÏÑúÏö∏" -> "ÏÑúÏö∏ÌäπÎ≥ÑÏãú";
            case "ÏàòÏõê" -> "Í≤ΩÍ∏∞ÎèÑ ÏàòÏõêÏãú";
            case "Ïù∏Ï≤ú" -> "Ïù∏Ï≤úÍ¥ëÏó≠Ïãú";
            case "Í¥ëÏ£º" -> "Í¥ëÏ£ºÍ¥ëÏó≠Ïãú";
            case "Ï†ÑÏ£º" -> "Ï†ÑÎ∂ÅÌäπÎ≥ÑÏûêÏπòÎèÑ Ï†ÑÏ£ºÏãú";
            case "Ïû•ÏÑ±" -> "Ï†ÑÎùºÎÇ®ÎèÑ Ïû•ÏÑ±Íµ∞";
            case "Î∂ÄÏÇ∞" -> "Î∂ÄÏÇ∞Í¥ëÏó≠Ïãú";
            case "ÎåÄÍµ¨" -> "ÎåÄÍµ¨Í¥ëÏó≠Ïãú";
            case "Ï∞ΩÏõê" -> "Í≤ΩÏÉÅÎÇ®ÎèÑ Ï∞ΩÏõêÏãú";
            case "ÎåÄÏ†Ñ" -> "ÎåÄÏ†ÑÍ¥ëÏó≠Ïãú";
            case "Ï†úÏ£º" -> "Ï†úÏ£ºÌäπÎ≥ÑÏûêÏπòÎèÑ";
            default -> "ÎåÄÌïúÎØºÍµ≠";
        };

        List<Place> places = regionParam.equals("Ï†ÑÏ≤¥")
                ? placeRepository.findAll()
                : placeRepository.findByRegion(regionParam);

        List<TravelCategory> travelCategories = travelCategoryRepository.findAll();
        List<TravelCategory> popularContents = travelCategoryService.getPopularContents(); // üî• Ï∂îÍ∞Ä

        List<String> regionList = List.of("ÏÑúÏö∏", "ÏàòÏõê", "Ïù∏Ï≤ú", "Í¥ëÏ£º", "Ï†ÑÏ£º", "Ïû•ÏÑ±", "Î∂ÄÏÇ∞", "ÎåÄÍµ¨", "Ï∞ΩÏõê", "ÎåÄÏ†Ñ", "Ï†úÏ£º");


        model.addAttribute("region", region);
        model.addAttribute("regionParam", regionParam);
        model.addAttribute("regionFullName", regionFullName);
        model.addAttribute("places", places);
        model.addAttribute("travelCategories", travelCategories);
        model.addAttribute("regionList", regionList);
        model.addAttribute("recentRegions", recentRegions);
        model.addAttribute("popularContents", popularContents);

        return "travel-content";
    }

    @GetMapping("/travel-content/recent/delete")
    public String deleteRecentRegion(
            @RequestParam("region") String regionToDelete,
            @RequestParam(value = "current", required = false, defaultValue = "Ï†ÑÏ≤¥") String currentRegion,
            HttpSession session) {

        List<String> recentRegions = (List<String>) session.getAttribute("recentRegions");
        if (recentRegions != null) {
            recentRegions.remove(regionToDelete);
            session.setAttribute("recentRegions", recentRegions);
        }

        String encodedRegion = URLEncoder.encode(currentRegion, StandardCharsets.UTF_8);
        return "redirect:/travel-content?region=" + encodedRegion;
    }

    @PostMapping("/content/click/{id}")
    @ResponseBody
    public ResponseEntity<Void> recordClick(@PathVariable Long id) {
        travelCategoryService.recordClick(id);
        return ResponseEntity.ok().build();
    }

}
